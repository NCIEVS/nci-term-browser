<?xml version="1.0" encoding="utf-8" ?>

<!-- bda-build-template version 1.1.1 -->

<project name="ncitbrowser-installer" default="upgrade" basedir="."
    xmlns:ivy="antlib:org.apache.ivy.ant"
    >

    <description>
        This build file is part of the bda-build-templates project. This is the master install file for the project.  It should be placed in project/software.  This script is copied into the distribution and  executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
        Install will do the following
            * Install binaries
            * Configure binaries
            * Install application
            * Configure application
        Upgrade will do the following
            * Install application
            * Configure application
        The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
        Application servers (option for grid services also)
            * JBoss
            * Tomcat
        This script requires java and ant to run. Every thing else it needs is included in the distribution.
    </description>

    <!-- Properties file related properties and tasks -->

    <property environment="env" />
    <property file="local.properties"/>
    <property file="project.properties"/>
    <property name="properties.file" value="${basedir}/install.properties"/>
    <echo message="Using properties file of ${properties.file}."/>
    <available file="${properties.file}" property="properties.file.exists" />
    <fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>
    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
    <property file="${properties.file}" />
    <property name="env.name" value="local"/>


    <property name="project.name" value="ncitbrowser"/>

    <!-- Generic properties -->
    <property name="log.dir" value="${basedir}/logs" />
    <property name="working.dir" value="${basedir}/working" />
    <property name="temp.dir" value="${working.dir}/temp" />

    <!-- Install Time properties -->
    <!-- Source and target directories -->
    <property name="bda-utils.dir" value="bda-utils" />
    <property name="tools.dir" value="${basedir}/${tools.dist.relative.dir}" />
    <property name="common.dir.src" value="${basedir}/${common.dist.relative.dir}" />
    <property name="common.dir.dest" value="${working.dir}/${common.dist.relative.dir}" />
    <property name="jboss-conf.dir.src" value="${basedir}/${jboss-conf.dist.relative.dir}" />
    <property name="jboss-conf.dir.dest" value="${working.dir}/${jboss-conf.dist.relative.dir}" />

    <!-- Jboss binding configurtion related properties -->

    <property name="jboss.binding.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/bindings.xml"/>
    <property name="jboss.service.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/jboss-service.xml"/>

    <!-- WAR -->
    <property name="ncitbrowser-webapp.dir.dist" value="${basedir}/${ncitbrowser-webapp.dist.relative.dir}" />
    <property name="ncitbrowser-webapp.war.file" value="ncitbrowser.war" />
    <property name="ncitbrowser-webapp.prop.file" value="NCItBrowserProperties.xml" />

    <!-- Grid related properties -->
    <!-- Default to false, properties can override -->
    <property name="jboss.ssl.enable" value="false"/>
    <!-- Paths -->
    <path id="bda-utils.classpath">
        <fileset dir="${bda-utils.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!-- Task definitions -->
    <taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml" classpathref="bda-utils.classpath"/>
    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath"/>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="bda-utils.classpath"/>
    <taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>
    <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="bda-utils.classpath"/>

    <!-- Conditionals -->
    <available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
    <!-- Includes-->
    <import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

    <!-- Start logging -->
    <property name="install-logs.dir" location="${log.dir}"/>
    <mkdir dir="${install-logs.dir}"/>
    <tstamp>
        <format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
    </tstamp>
    <record name="${install-logs.dir}/install-${install.time}.log" action="start"/>

    <!-- ****************************** Installer section ********************************** -->

    <target name="diag">
        <echoproperties/>
    </target>
    <target name="common:init:pre">
        <!-- Set application.base.path based on platform -->
        <condition property="application.base.path" value="${application.base.path.linux}">
            <or>
                <os family="unix" />
                <os family="mac" />
            </or>
        </condition>

        <condition property="application.base.path" value="${application.base.path.windows}">
            <os family="windows" />
        </condition>
        <echo message="application.base.path=${application.base.path}"/>
        <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
        <jboss-version/>
        <!-- Set application.data.path based on platform -->
        <condition property="application.data.path" value="${application.data.path.linux}">
            <or>
                <os family="unix" />
                <os family="mac" />
            </or>
        </condition>
        <condition property="application.data.path" value="${application.data.path.windows}">
            <os family="windows" />
        </condition>
        <echo message="application.data.path=${application.data.path}"/>
    </target>

    <target name="install:jboss:init" depends="common:init:pre">
        <!-- determine if port configurations or port lists are being called -->
        <if>
            <isset property="jboss.ncicb-standard.port-config"/>
            <then>
                <!-- Read some port properties from standard bindings file -->
                <echo message="Using JBoss NCICB Standard port configurations"/>
                <if>
                    <equals arg1="${jboss.major.version}" arg2="4"/>
                    <then>
                        <property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
                        <jboss51-read-ports
                            jboss.server.bindingfile.location="${jboss.server.binding.template.location}"
                            />
                        <jboss-bindings-validate
                            jboss.server.bindingfile.location="${jboss.server.binding.template.location}"
                    />
                    </then>
                    <elseif>
                        <equals arg1="${jboss.major.version}" arg2="5"/>
                        <then>
                            <property name="jboss.server.bindingfile.location" value="${basedir}/${jboss-bindings.file}"/>
                            <property name="temp.ejb.file" value="${temp.dir}/ejb3-connectors-jboss-beans.xml"/>
                            <copy tofile="${temp.ejb.file}" file="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/ejb3-connectors-jboss-beans.xml"/>
                            <jboss51-bindings-nci
                                jboss.server.bindingfile.location="${jboss.server.bindingfile.location}"
                                />
                            <jboss51-read-ports-nci
                                jboss.server.bindingfile.location="${jboss.server.bindingfile.location}"
                                jboss.server.ejbfile.location="${temp.ejb.file}"
                                />
                        </then>
                    </elseif>
                </if>
                <echo message="http -${jboss.server.port} "/>
                <echo message="http -${jboss.server.jndi.port} "/>
                    <if>
                        <equals arg1="${jboss.major.version}" arg2="4"/>
                        <then>
                                <property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
                        </then>
                        <else>
                                <property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings-jboss-beans.xml"/>

                        </else>
                    </if>
                <properties-exist
                    properties.list="jboss.server.jndi.port,jboss.server.port,jboss.server.ports.name"
                    />
            </then>
            <else>
                <!-- else ensure that all ports are set, since these will be removed from install-properties.template we will verify here.  They have to be removed so the validator works with or without the properties or we have to change the format of the file. -->
                <echo message="Using custom JBoss port configurations"/>
                <property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
                <properties-exist
                    properties.list="jboss.server.jndi.port,jboss.server.port,jboss.cobraorb.port,jboss.hajndi.port,jboss.hajrmi.port,jboss.jmx-rmi.port,jboss.messaging.port,jboss.pooledha.port,jboss.server.bind.port,jboss.server.rmi.port,jboss.service.rmiobject.port,jboss.snmp.port,jboss.snmp-trapd.port,jboss.web.service.port,jboss.unifiedinvoker.port,jboss.hajndi.auto.port,jboss.ssl.port,jboss.jms2.netty.port,jboss.jms2.netty-ssl.port,jboss.transaction.recovery.port,jboss.transaction.status.port,jboss.transaction.processid.port"
                    />
            </else>
        </if>
    </target>

    <target name="common:jboss:init" depends="common:init:pre" unless="exclude.jboss">
        <math result="jboss.ssl.port" operand1="${jboss.server.port}" operation="+" operand2="363" datatype="int"/>
        <property name="jboss.ssl.enable" value="false"/>
        <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
        <jboss-version/>
        <property name="jboss.application.url" value="http://${jboss.server.hostname}:${jboss.server.port}/${project.name}"/>
        <available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
        <basename file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.file"/>
        <dirname file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.dir"/>
        <basename file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.cert.file"/>
        <dirname file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.dir"/>
        <basename file="${jboss.grid.secure.key.location}" property="jboss.grid.secure.key.file"/>
        <property name="jboss.socket.ports" value="${jboss.server.port},${jboss.server.rmi.port},${jboss.server.jndi.port},${jboss.service.rmiobject.port},${jboss.jms.port},${jboss.web.service.port}"/>
    </target>

    <target name="common:init" depends="common:init:pre">
        <property name="properties.template.file" value="${basedir}/properties.template" />

        <filterset id="embedded.filterset">
            <filter token="application.base.path" value="${application.base.path}"/>
            <filter token="application.url" value="${application.url}"/>
            <filter token="jboss.home" value="${jboss.home}"/>
            <filter token="tomcat.home" value="${tomcat.home}"/>
            <filter token="env.LOGNAME" value="${env.LOGNAME}"/>
            <filter token="env.JAVA_HOME" value="${env.JAVA_HOME}"/>
            <filter token="project.name" value="${project.name}"/>
        </filterset>

        <!--OS Temp dir -->
        <condition property="os.temp.dir" value="/tmp/${project.name}">
            <or>
                <os family="unix" />
                <os family="mac" />
            </or>
        </condition>

        <condition property="os.temp.dir" value="c:/temp/${project.name}">
            <os family="windows" />
        </condition>

        <!-- Copy files to ensure values containing variables are expanded, such properties are stored in embedded.filterset and then copy with filter files -->

        <copy todir="${common.dir.dest}" filtering="true">
            <fileset dir="${common.dir.src}">
                <include name="**/*"/>
            </fileset>
            <filterset refid="embedded.filterset"/>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
            </filterset>
        </copy>
    </target>

    <target name="install:common:clean" description="Removes all files from the local filesystem" depends="common:init, install:jboss:clean ">
    </target>

    <target name="install:jboss:clean" unless="exclude.jboss" depends="common:jboss:init, common:init">
        <sleep seconds="5" />
        <property name="backup.count" value="5"/>
        <if>
            <not>
                <equals arg1="${exclude.jboss.backup}" arg2="true"/>
            </not>
            <then>
                <!-- Jboss backup, do not compress until install is finished -->
                <property name="backup.jboss.base.dir" location="${application.base.path}/backup/jboss"/>

                <!-- So these directories won't be included in the backup, they are not needed to use jboss -->
                <delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
                <delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>

                <backup-dir
                    src.dir="${jboss.home}"
                    backup.base.dir="${backup.jboss.base.dir}"
                    backup.count="${backup.count}"
                    />
            </then>
        </if>
        <delete dir="${jboss.home}"/>
    </target>

    <target name="install:jboss:binaries" description="Install JBoss binaries" unless="exclude.jboss" depends="common:jboss:init, common:init">
        <jboss-install-binaries/>
        <jboss-nci-customizations/>
    </target>

    <target name="install:jboss:ncitbrowser-webapp" description="Deploy ncitbrowser-webapp and common libraries to jboss installation" unless="exclude.jboss"
        depends="common:jboss:init, common:init">
        <!-- added to ensure working.dirs are fresh for our install -->
        <delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>
        <delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
        <move file="${jboss.home}/server/${jboss.server.name}/log/server.log" tofile="${jboss.home}/server/${jboss.server.name}/log/server/log.${install.time}" failonerror="false"/>
        <copy file="${ncitbrowser-webapp.dir.dist}/${ncitbrowser-webapp.war.file}"
             todir="${jboss.home}/server/${jboss.server.name}/deploy"
             overwrite="true"
        >
        </copy>
        <!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
        <copy file="${bda-utils.dir}/clm-3.2.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
        -->
    </target>

    <target name="install:jboss:ncitbrowser-webapp:configure" description="Configure ncitbrowser-webapp application, copies over externalized properties or configurations that are not part of the jboss configuration"
        unless="exclude.jboss" depends="-install:jboss:configure:properties-service">

        <tstamp>
            <format property="BUILD_DATE" pattern="MMMM-d-yyyy hh:mm aa" locale="en,US"/>
        </tstamp>

        <!-- copy over any other files you may need to configure your application -->

        <filterset id="embedded.filterset">
            <filter token="debug.on" value="${debug.on}"/>
            <filter token="lex.evs.api.url" value="${lex.evs.api.url}"/>
            <filter token="lg.config.file" value="${lg.config.file}"/>
            <filter token="ncitbrowser.conf.path" value="${application.data.path}/${ncitbrowser.conf.path}"/>
            <filter token="ehcache.xml.file" value="${application.data.path}/${ncitbrowser.conf.path}/${ehcache.xml.file}"/>
            <filter token="ehcache.cache.path" value="${application.data.path}/${ehcache.cache.path}"/>
            <filter token="maximum.return" value="${maximum.return}"/>
            <filter token="maximum.tree.level" value="${maximum.tree.level}"/>
            <filter token="sort.by.score" value="${sort.by.score}"/>
            <filter token="mail.smtp.server" value="${mail.smtp.server}"/>
            <filter token="ncicb.contact.url" value="${ncicb.contact.url}"/>
            <filter token="terminology.subset.download.url" value="${terminology.subset.download.url}"/>
            <filter token="ncit.build.info" value="Built: ${BUILD_DATE}"/>
            <filter token="application.version" value="${application.version}"/>
            <filter token="ncit.url" value="${ncit.url}"/>
            <filter token="ncim.url" value="${ncim.url}"/>
            <filter token="term.suggestion.application.url" value="${term.suggestion.application.url}"/>
            <filter token="pagination_time_out" value="${pagination_time_out}"/>
            <filter token="minimum_search_string_length" value="${minimum_search_string_length}"/>
            <filter token="sliding_window_half_width" value="${sliding_window_half_width}"/>
            <!-- Begin security token parameters -->
            <filter token="license_page_option" value="${license_page_option}"/>
            <filter token="meddra_security_token" value="${meddra_security_token}"/>
            <!-- End security token parameters -->
            <filter token="application.base.path" value="${application.base.path}"/>
            <filter token="application.url" value="${application.url}"/>
            <filter token="jboss.home" value="${jboss.home}"/>
            <filter token="tomcat.home" value="${tomcat.home}"/>
            <filter token="env.LOGNAME" value="${env.LOGNAME}"/>
            <filter token="env.JAVA_HOME" value="${env.JAVA_HOME}"/>
            <filter token="project.name" value="project.name"/>
        </filterset>
        <mkdir dir="${application.data.path}/${ncitbrowser.conf.path}" />
        <mkdir dir="${application.data.path}/${ehcache.cache.path}" />
        <copy todir="${application.data.path}/${ncitbrowser.conf.path}" filtering="true" overwrite="true">
            <filterset refid="embedded.filterset"/>
            <fileset dir="${ncitbrowser-webapp.dir.dist}/deploy">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!-- copy JBoss-web.xml file -->
        <!--
        <copy file="${jboss-conf.dir.dest}/${jboss.web.xml.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
        -->

    </target>

    <target name="-install:jboss:configure:properties-service" depends="common:jboss:init, common:init">

        <!-- Check if already updated -->
        <condition property="properties-service.updated">
            <isfileselected file="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml">
                <contains text="NCItBrowserProperties" casesensitive="no"/>
            </isfileselected>
        </condition>

        <!-- Backup file -->
        <copy file="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml"
            tofile="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml.bak"
        />

        <if>
            <equals arg1="${properties-service.updated}" arg2="true"/>
            <then>
                <xmltask source="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml"
                    dest="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml">
                    <replace path="/server/mbean/attribute[contains(text(),'NCItBrowserProperties')]">
<![CDATA[<attribute name="Properties">
    gov.nih.nci.evs.browser.NCItBrowserProperties=${application.data.path}/${ncitbrowser.conf.path}/${ncitbrowser-webapp.prop.file}
</attribute>]]>
                    </replace>
                </xmltask>
            </then>
            <else>
                <xmltask source="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml"
                    dest="${jboss.home}/server/${jboss.server.name}/deploy/properties-service.xml">
                    <insert path="/server/mbean[@code='org.jboss.varia.property.SystemPropertiesService']">
<![CDATA[<attribute name="Properties">
    gov.nih.nci.evs.browser.NCItBrowserProperties=${application.data.path}/${ncitbrowser.conf.path}/${ncitbrowser-webapp.prop.file}
</attribute>]]>
                    </insert>
                </xmltask>
            </else>
        </if>

        <echo message="properties-service.xml updated." />

    </target>

    <target name="install:jboss:configure:log4j" description="Configure custom entries in system wide log4j" unless="exclude.jboss" depends="common:jboss:init, common:init">
        <echo message="Configuring Log4J"/>
        <property name="log4j.file.name" value="jboss-log4j.xml"/>
        <copy file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}" tofile="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}.pre"/>
        <replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
            byline="true"
            match="^(&lt;!DOCTYPE.*)"
            replace="&lt;!-- \1 --&gt;"
            />
        <!--<copy file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}" tofile="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}.1"/>-->
        <xmltask source="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
            dest="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}">
            <remove path="/log4j:configuration/appender[@name='TestAppender']"/>
            <!--
            <insert path="/log4j:configuration">
                <![CDATA[
                <appender name="TestAppender" class="org.jboss.logging.appender.RollingFileAppender">
                    <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
                    <param name="File" value="${jboss.server.log.dir}/testAppender.log"/>
                    <param name="Append" value="false"/>
                    <param name="MaxFileSize" value="${log4j.maxFileSize}"/>
                    <param name="MaxBackupIndex" value="${log4j.maxDays}"/>
                    <layout class="org.apache.log4j.PatternLayout">
                        <param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
                    </layout>
                </appender>
                ]]>
            </insert>
            -->
            <remove path="/log4j:configuration/category[@name='org.nih.nci']"/>
            <!--
            <insert path="/log4j:configuration">
                <![CDATA[
                <category name="org.nih.nci">
                    <priority value="${log4j.level}"/>
                </category>
                ]]>
            </insert>
            -->
        </xmltask>
        <!--<copy file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}" tofile="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}.2"/>-->
        <validate-log4j
            log4j.file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
            />
        <replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}"
            byline="true"
            match="^&lt;!-- (&lt;!DOCTYPE.*) --&gt;"
            replace="\1"
            />
        <!--<copy file="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}" tofile="${jboss.home}/server/${jboss.server.name}/conf/${log4j.file.name}.post"/>-->
    </target>

    <target name="install:jboss:configure" description="Configure JBoss (bindings, login-config.xml, ect)" unless="exclude.jboss"
        depends="
        common:jboss:init,
        common:init,
        install:jboss:configure:log4j
            ">
        <!-- Calls the following macros
            jboss-bindings - configures ports for jboss
            jboss-login-config - sets up authentication
            secure-jboss-console - adds password to jboss console apps
            jboss-update-shutdown - updates shutdown.jar with correct jndi port so no args need to used 4 shutdown
            appserver-ssl-configure -  enables ssl
            appserver-configure-external-hostname - configures jboss for use through a reverse proxy
            grid-secure-configure-connector - configures secure grid
        -->
        <!-- Use below if you are defining all the ports in your install.xml not the NCICB port configuraitons-->
        <if>
            <equals arg1="${jboss.major.version}" arg2="4"/>
            <then>
                <jboss-configure
                    jboss.grid.configure="true"
                    />
                <if>
                    <equals arg1="${jboss.cgmm.enable}" arg2="true"/>
                    <then>
                        <jboss-configure-cgmm
                            />
                    </then>
                </if>
            </then>
        </if>
        <if>
            <equals arg1="${jboss.major.version}" arg2="5"/>
            <then>
                <xmltask preservetype="true" source="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml"
                    dest="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml">
                    <xmlcatalog refid="bda.xml.catalog"/>
                    <remove path="/Server/Service[@name='jboss.web']/Connector[@keystoreFile='${jboss.server.home.dir}/conf/keystore/server.keystore']" />
                </xmltask>
                <jboss-configure
                    jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindingservice.beans/META-INF/bindings-jboss-beans.xml"
                    jboss.server.binding.template.location="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings-jboss-beans.xml"
                    jboss.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml"
                    jboss.server.ports.name="ports-default"
                    proxy.update.connector.port.ssl="${jboss.ssl.port}"
                    />
            </then>
        </if>

        <!-- Turn off JBoss hot deploy. We will use twiddle.bat for hot deployments -->
        <move
            file="${jboss.home}/server/${jboss.server.name}/deploy/hdscanner-jboss-beans.xml"
            tofile="${jboss.home}/server/${jboss.server.name}/deploy/hdscanner-jboss-beans.xml.bak"
            />

    </target>

    <target name="-install:jboss:configure:jbossmq-dest" description="Configure MQ settings based on contents of software/common/resource/jboss-conf/jbossmq-destinations-service.block.xml" unless="exclude.jboss" depends="common:jboss:init,common:init">
        <!-- Provide template to change jboss mq configurations
        <property name="jboss-mq.block.file" value="${resource.dir.target}/jbossmq-destinations-service.block.xml"/>
        <xmlconfig in="${jboss.home}/server/${jboss.server.name}/deploy/jms/jbossmq-destinations-service.xml" verbose="false">
            <insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[1]" />
            <insertbranch path="//server" srcxmlfile="${jboss-mq.block.file}" srcpath="//mbean[2]" />
        </xmlconfig>
        -->
    </target>

    <target name="install:jboss:stop" description="Stops jboss" unless="exclude.jboss" depends="common:jboss:init,common:init">
        <if>
            <isset property="jboss.exists"/>
            <then>
                <jboss-stop-jboss
                    jboss.server.jndi.port="${jboss.server.jndi.port}"
                    sleep.time="5"
                />
            </then>
        </if>
    </target>

    <target name="install:jboss:start" description="Starts jboss" unless="exclude.jboss" depends="common:jboss:init,common:init">
        <if>
            <not>
                <isset property="exclude.start.servers"/>
            </not>
            <then>
                <jboss-start-jboss />
                <sleep seconds="15"/>
            </then>
        </if>
    </target>
    <target name="install:common:validation:pre-install" description="Runs pre-install validation checks bda-utils" depends="common:init">
        <validate-pre-install-common
            ant.check.version="${ant.minimum.version}"
            java.check.version.major="${java.major.version}"
            java.check.version.minor="${java.minor.version}"
            />
    </target>
    <target name="install:jboss:validation:pre-install" description="Runs pre-install validation checks bda-utils"
        depends="
        common:jboss:init,common:init,
        install:common:validation:pre-install
        ">
        <validate-pre-install-jboss
            />
    </target>
    <target name="install:jboss:validation:pre-install:ports" description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop"
        depends="
        common:init,
        install:jboss:stop
        ">
        <validate-pre-jboss-ports
            />
    </target>

    <target name="install:common:validation:post-install" description="Run post-install checks from bda-utils"
        depends="
        common:init
        ">
        <validate-post-common />
    </target>
    <target name="install:jboss:validation:post-install" description="Run post-install checks from bda-utils"
        depends="
        common:jboss:init,
        common:init,
        install:jboss:start
        ">
        <if>
            <not>
                <isset property="exclude.start.servers"/>
            </not>
            <then>
                <validate-post-jboss />
            </then>
        </if>
    </target>


    <target name="install:jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.jboss"
        depends="
    common:jboss:init,
    common:init,
    install:jboss:init,
    install:jboss:validation:pre-install,
    install:common:validation:pre-install,
    install:jboss:stop,
    install:jboss:validation:pre-install:ports,
    install:jboss:clean,
    install:jboss:binaries,
        install:jboss:ncitbrowser-webapp:re-configure,
        install:jboss:ncitbrowser-webapp,
        install:jboss:ncitbrowser-webapp:configure,
    install:jboss:configure,
    install:post:jboss,
    install:jboss:start,
    install:jboss:validation:post-install
        " >
    </target>

    <target name="install" description="Installs and configures JBOSS and deploys application" depends="install:jboss">
    </target>

    <target name="install:jboss:ncitbrowser-webapp:re-configure" description="Update contents of artifacts if not all properties have been externalized, by extracting artifact, modify it as needed and re-archive it." unless="exclude.jboss" depends="common:jboss:init,common:init">
        <!-- This is only required if configuration files are not externalized, below is a sample of what you may do.
        <delete dir="${working.dir}/ncitbrowser-webapp"/>
        <unzip src="${ncitbrowser-webapp.dir.dist}/${ncitbrowser-webapp.war.file}" dest="${working.dir}/ncitbrowser-webapp"/>
        <copy todir="${working.dir}/ncitbrowser-webapp/WEB-INF/classes" file="${jboss-conf.dir.dest}/hibernate.cfg.xml"/>

        <move file="${ncitbrowser-webapp.dir.dist}/${ncitbrowser-webapp.war.file}" tofile="${ncitbrowser-webapp.dir.dist}/${ncitbrowser-webapp.war.file}.orig"/>
        <war destfile="${ncitbrowser-webapp.dir.dist}/${ncitbrowser-webapp.war.file}" compress="false" webxml="${working.dir}/ncitbrowser-webapp/WEB-INF/web.xml" >
            <fileset dir="${working.dir}/ncitbrowser-webapp">
                <include name="*/**" />
            </fileset>
        </war>
        -->
    </target>

    <target name="upgrade:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss" depends="upgrade:jboss:init,common:init,upgrade-ncm:jboss">
    </target>

    <target name="upgrade" description="Upgrades JBoss" depends="upgrade:jboss">
    </target>

    <target name="upgrade-dac:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
        depends="
    upgrade:jboss:init,
    common:init,
    common:jboss:init,
    install:jboss:validation:pre-install,
    install:common:validation:pre-install,
    install:jboss:stop,
    install:jboss:validation:pre-install:ports,
    install:jboss:clean,
    install:jboss:binaries,
    install:jboss:configure,
        install:jboss:ncitbrowser-webapp:re-configure,
        install:jboss:ncitbrowser-webapp,
        install:jboss:ncitbrowser-webapp:configure,
    upgrade:post:jboss,
    install:post:jboss,
    install:jboss:start,
    install:jboss:validation:post-install
        ">
    </target>

    <target name="upgrade-cm:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
        depends="
    upgrade:jboss:init,
    common:init,
    common:jboss:init,
    install:jboss:validation:pre-install,
    install:common:validation:pre-install,
    install:jboss:stop,
    install:jboss:validation:pre-install:ports,
    install:jboss:configure,
        install:jboss:ncitbrowser-webapp:re-configure,
        install:jboss:ncitbrowser-webapp,
        install:jboss:ncitbrowser-webapp:configure,
    upgrade:post:jboss,
    install:post:jboss,
    install:jboss:start,
    install:jboss:validation:post-install
        ">
    </target>

    <target name="upgrade-ncm:jboss" description="Wrapper target to call all targets required to upgrade jboss container." unless="exclude.jboss"
        depends="
    upgrade:jboss:init,
    common:init,
    common:jboss:init,
    install:jboss:validation:pre-install,
    install:common:validation:pre-install,
    install:jboss:stop,
    install:jboss:validation:pre-install:ports,
        install:jboss:ncitbrowser-webapp:re-configure,
        install:jboss:ncitbrowser-webapp,
        install:jboss:ncitbrowser-webapp:configure,
    upgrade:post:jboss,
    install:post:jboss,
    install:jboss:start,
    install:jboss:validation:post-install
        ">
    </target>

    <target name="install:common:post"
        depends="common:init,install:post:jboss">
    </target>

    <target name="install:post:jboss" unless="exclude.jboss">
        <if>
            <not>
                <equals arg1="${exclude.jboss.backup}" arg2="true"/>
            </not>
            <then>
                <property name="changelogFile" location="${install-logs.dir}/chagneLog-${install.time}.txt"/>
                <property name="compare1.dir" location="${backup.jboss.base.dir}/backup/${jboss.relative.path}"/>
                <property name="compare2.dir" location="${jboss.home}"/>
                <report-dir-diff
                    dir1="${compare1.dir}"
                    dir2="${compare2.dir}"
                    reportFile="${changelogFile}"
                    />
                <!-- Copy app server logs -->
                <mkdir dir="${jboss.home}/server/${jboss.server.name}/log"/>
                <mkdir dir="${backup.jboss.base.dir}/backup/${jboss.relative.path}/server/${jboss.server.name}/log"/>
                <!-- so the logs wont be included in the zip -->
                <move todir="${jboss.home}/server/${jboss.server.name}/log">
                    <fileset dir="${backup.jboss.base.dir}/backup/${jboss.relative.path}/server/${jboss.server.name}/log">
                        <include name="*"/>
                    </fileset>
                </move>

                <!-- Compress backup and cleanup -->
                <mkdir dir="${backup.jboss.base.dir}/backup1"/>
                <zip destfile="${backup.jboss.base.dir}/backup1/${jboss.relative.path}.zip" basedir="${backup.jboss.base.dir}/backup" />
                <delete dir="${backup.jboss.base.dir}/backup"/>
            </then>
        </if>
    </target>

    <target name="upgrade:common:init" depends="upgrade:jboss:init " unless="install.running">
    </target>
    <target name="upgrade:jboss:init" unless="install.running"
        depends="
        upgrade:jboss:init:prep,
        upgrade:jboss:readers:bda,
        upgrade:jboss:readers:custom
        ">
        <properties-print
            properties.list="${read.properties.list}"
            />
        <properties-exist
            properties.list="${read.properties.list}"
            />
        <properties-write
            properties.list="${read.properties.list}"
            />
    </target>
    <target name="upgrade:common:init:prep" unless="install.running">
        <if>
            <not>
                <isset property="application.base.path"/>
            </not>
            <then>
                <!-- Set application.base.path based on platform -->
                <condition property="application.base.path" value="${application.base.path.linux}">
                    <or>
                        <os family="unix" />
                        <os family="mac" />
                    </or>
                </condition>

                <condition property="application.base.path" value="${application.base.path.windows}">
                    <os family="windows" />
                </condition>
                <echo message="application.base.path=${application.base.path}"/>
            </then>
        </if>
        <properties-print
            properties.list="application.base.path,jboss.home,tomcat.home,jboss.server.name"
            />
        <var name="read.properties.list" value=""/>
        <property name="upgrade.running" value="true"/>
    </target>

    <target name="upgrade:jboss:init:prep" depends="upgrade:common:init:prep" unless="install.running">
        <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
        <jboss-version/>
        <if>
            <equals arg1="${jboss.ncicb-standard.port-config}" arg2="true"/>
            <then>
                <property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
            </then>
            <else>
                <property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
            </else>
        </if>

        <property name="upgrade.running" value="true"/>
        <!-- Upgrades always use port configs -->
        <property name="jboss.ncicb-standard.port-config" value="true"/>
        <available file="${jboss.home}" property="jboss.exists"/>
        <property name="read.jboss.home" value="${jboss.home}"/>

    </target>


    <target name="upgrade:jboss:readers:custom" unless="install.running">
        <!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->
    </target>


    <target name="upgrade:jboss:readers:bda" if="jboss.exists">
        <!-- Make sure the ${properties.file} has at least the following props -->
        <properties-exist
            properties.list="application.base.path,jboss.home,jboss.server.name"
            />

        <!-- Set these -->

        <osfamily property="os.family"/>
        <if>
            <or>
                <equals arg1="${os.family}" arg2="unix"/>
                <equals arg1="${os.family}" arg2="mac"/>
            </or>
            <then>
                <property name="jboss.server.hostname" value="${env.HOSTNAME}"/>
            </then>
        </if>
        <if>
            <equals arg1="${os.family}" arg2="windows"/>
            <then>
                <property name="jboss.server.hostname" value="${env.COMPUTERNAME}"/>
            </then>
        </if>

        <!-- Begin JBoss Readers -->

        <!-- Reader reqiures that you have only one data source defined in each *-ds.xml file -->

        <jboss-read-ldapconfig
            jboss.home="${read.jboss.home}"
            />
        <if>
            <equals arg1="${jboss.major.version}" arg2="4"/>
            <then>
                <jboss-read-bindings-file-location
                    jboss.home="${read.jboss.home}"
                    />
                <jboss-read-ports
                    />
            </then>
        </if>
        <if>
            <equals arg1="${jboss.major.version}" arg2="5"/>
            <then>
                <jboss51-read-default-portconfig
                    />
                <jboss51-read-ports-nci
                    />
            </then>
        </if>

        <!-- Setting this variable will cause install to copy it into place if using CM/DAC, not modified in NCM -->

        <var name="jboss.ssl.keystore.dir" value="${working.dir}/keys/jboss"/>
        <if>
            <equals arg1="${jboss.major.version}" arg2="4"/>
            <then>
                <jboss-read-ssl
                    jboss.home="${read.jboss.home}"
                    copied.keystore.dir="${jboss.ssl.keystore.dir}"
                    />
            </then>
        </if>
        <if>
            <equals arg1="${jboss.major.version}" arg2="5"/>
            <then>
                <jboss-read-ssl
                    jboss.home="${read.jboss.home}"
                    jboss.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml"
                    copied.keystore.dir="${jboss.ssl.keystore.dir}"
                    />
            </then>
        </if>
        <if>
            <equals arg1="${jboss.major.version}" arg2="4"/>
            <then>
                <jboss-read-external-hostname
                    jboss.home="${read.jboss.home}"
                    search.ssl.port="${jboss.ssl.port}"
                    />
            </then>
        </if>
        <if>
            <equals arg1="${jboss.major.version}" arg2="5"/>
            <then>
                <jboss-read-external-hostname
                    jboss.home="${read.jboss.home}"
                    jboss.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml"
                    search.ssl.port="${jboss.ssl.port}"
                    />
            </then>
        </if>

        <!-- for tier installs, should be done first, since it is set first it will be the one used if it exists -->

        <jboss-read-java_opts
            jboss.bin.dir="${read.jboss.home}/server/${jboss.server.name}/bin"
            />
        <jboss-read-java_opts
            jboss.home="${read.jboss.home}"
            />

        <!-- will have to add code to install:post:jboss to copy this back if exists -->

        <property name="copied.jboss.log4j.dir" value="${working.dir}/copied-log4j"/>
        <if>
            <equals arg1="${jboss.major.version}" arg2="4"/>
            <then>
                <jboss-copy-log4j
                    jboss.home="${read.jboss.home}"
                    jboss.log4j.location="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"
                    copied.jboss.log4j.dir="${copied.jboss.log4j.dir}"
                    />
            </then>
        </if>
        <if>
            <equals arg1="${jboss.major.version}" arg2="5"/>
            <then>
                <jboss-copy-log4j
                    jboss.home="${read.jboss.home}"
                    jboss.log4j.location="${jboss.home}/server/${jboss.server.name}/conf/jboss-log4j.xml"
                    copied.jboss.log4j.dir="${copied.jboss.log4j.dir}"
                    />
            </then>
        </if>

    </target>

    <target name="upgrade:post:jboss">
         <copy file="${copied.jboss.log4j.dir}/jboss-log4j.xml" todir="${jboss.home}/server/${jboss.server.name}/conf"/>
    </target>

</project>
